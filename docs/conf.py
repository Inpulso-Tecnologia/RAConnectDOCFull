# -*- coding: utf-8 -*-

from __future__ import division, print_function, unicode_literals

import os
import sys
from configparser import RawConfigParser

import sphinx_rtd_theme

sys.path.insert(0, os.path.abspath('..'))
sys.path.append(os.path.dirname(__file__))



def get_version():
    """Return package version from setup.cfg."""
    config = RawConfigParser()
    config.read(os.path.join('..', 'setup.cfg'))
    return config.get('metadata', 'version')

# extensions = [
#     'sphinx.ext.autosummary',
#     'sphinx.ext.autodoc',
#     'sphinx.ext.coverage',
#     'sphinx.ext.doctest',
#     'sphinx.ext.intersphinx',
#     'sphinx.ext.mathjax',
#     'sphinx.ext.napoleon',
#     'sphinx.ext.todo',
#     'sphinx.ext.viewcode',
#     'sphinx.ext.githubpages'
# ]

sys.path.append(os.path.abspath('_ext'))
extensions = [
    'sphinx.ext.autosectionlabel',
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinxcontrib.httpdomain',
    'djangodocs',
    'doc_extensions',
    'sphinx_tabs.tabs',
    'sphinx-prompt',
    'recommonmark',
    'notfound.extension',
    'sphinx_search.extension',
]

autosummary_generate = True

templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']
source_parsers = {'.md': 'recommonmark.parser.CommonMarkParser'}

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'RA Connect'
copyright = '2019-2020, Inpulso Tecnologia'
# copyright = u'JrTech Soluções em Tecnologia'
author = u'Patrick Albino'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = get_version()
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'pt'


add_module_names = False
# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
# exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# import sphinx_rtd_theme
html_theme = 'sphinx_rtd_theme'
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Joel December 11, 2017: added for mathjax operator \vc
# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = ["."]

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Joel April 2018: table widths bug in Read The Docs
html_context = {
    'css_files': [
        '_static/theme_overrides.css',  # override wide tables in RTD theme
        ],
     }
def setup(app):
   app.add_javascript("custom.js")
  app.add_stylesheet('theme_overrides.css')
  app.add_stylesheet('cookie_notice.css')
  app.add_javascript('cookie_notice.js')


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'docs'


# -- Options for LaTeX output ---------------------------------------------
latex_engine = 'xelatex'
latex_use_xindy = False
# latex_show_urls = 'inline'
# latex_show_pagerefs = 'true'
# latex_toplevel_sectioning = 'section'
latex_logo = 'img/logo.png'
latex_use_xindy = 'true'
# latex_toplevel_sectioning = 'section'
latex_elements = {
    'figure_align': 'H'
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).

# latex_preamble = r"""
# \usepackage{amsmath}
# \usepackage{amssymb}
# \usepackage{amsbsy}
# \usepackage{braket}
# \usepackage{circuitikz}

# \newcommand{\vc}[1]{\pmb{#1}}





# """




latex_documents = [
    (master_doc, 'docs.tex', u'RA Connect',
     u'Documentação', 'manual'),
]

#
# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'docs', u'dock Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'dock', u'dock Documentation',
     author, 'dock', 'One line description of project.',
     'Miscellaneous'),
]

text_newlines = 'native'
# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# Joel May 16: WARNING: failed to reach any of the inventories with the following issues:
# WARNING: intersphinx inventory 'http://networkx.readthedocs.io/en/latest/objects.inv' not
# fetchable due to <class 'requests.exceptions.HTTPError'>: ('intersphinx inventory %r not
# fetchable due to %s: %s', 'http://networkx.readthedocs.io/en/latest/objects.inv', <class
# 'requests.exceptions.HTTPError'>, HTTPError(...))

# Example configuration for intersphinx: refer to the Python standard library.
#intersphinx_mapping = {'https://docs.python.org/': None,
#                       'http://networkx.readthedocs.io/en/latest/': None}
intersphinx_mapping = {'python': ('https://docs.python.org/', None),
    'dimod': ('https://docs.ocean.dwavesys.com/projects/dimod/en/latest/', None),
    'binarycsp': ('https://docs.ocean.dwavesys.com/projects/binarycsp/en/latest/', None),
    'cloud-client': ('https://docs.ocean.dwavesys.com/projects/cloud-client/en/latest/', None),
    'neal': ('https://docs.ocean.dwavesys.com/projects/neal/en/latest/', None),
    'networkx': ('https://docs.ocean.dwavesys.com/projects/dwave-networkx/en/latest/', None),
    'system': ('https://docs.ocean.dwavesys.com/projects/system/en/latest/', None),
    'penaltymodel': ('https://docs.ocean.dwavesys.com/projects/penaltymodel/en/latest/', None),
    'minorminer': ('https://docs.ocean.dwavesys.com/projects/minorminer/en/latest/', None),
    'hybrid': ('https://docs.ocean.dwavesys.com/projects/hybrid/en/latest/', None),
    'qbsolv': ('https://docs.ocean.dwavesys.com/projects/qbsolv/en/latest/', None),
    'tabu': ('https://docs.ocean.dwavesys.com/projects/tabu/en/latest/', None),
    'sysdocs_gettingstarted': ('https://docs.dwavesys.com/docs/latest/', None)}

# sort documentation they way the appear in the source file
autodoc_member_order = 'bysource'

# show inherited members
# autodoc_default_flags = ['members', 'undoc-members', 'inherited-members', 'show-inheritance']
